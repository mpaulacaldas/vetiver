---
title: Deploy your model
subtitle: Deploy and maintain models with vetiver (R)
format: html
---

## Create a new vetiver model 🌳🌴🌲🌲🌴🌳🌴🌳🌲

Fit a random forest model

```{r}
library(tidyverse)
library(tidymodels)
library(arrow)
path <- here::here("data", "inspections.parquet")
inspections <- read_parquet(path)

set.seed(123)
inspect_split <- initial_split(inspections, prop = 0.8)
inspect_train <- training(inspect_split)
inspect_test <- testing(inspect_split)

inspection_rec <- 
  recipe(
    results ~ facility_type + risk + total_violations + inspection_date, 
    data = inspect_train
    ) |> 
  step_date(
    inspection_date, 
    features = c("month", "year"), 
    keep_original_cols = FALSE
    )

inspection_fit <- inspection_rec |> 
  workflow(rand_forest(mode = "classification", trees = 1e3)) |> 
  fit(data = inspect_train)
```

Store your model on Posit Connect:

```{r}
library(vetiver)
library(pins)

# board_gdrive() doesn't work for deploying, but there may be a workaround
# with board_folder()
v <- vetiver_model(inspection_fit, "chicago-inspections-rstats")
board <- board_folder("pin-warehouse", versioned = TRUE)
board |> vetiver_pin_write(v)
```

## Model Card ❤️

Open the Model Card template in RStudio by choosing "File" ➡️ "New File" ➡️ "R Markdown" ➡️ "From Template" ➡️ "Vetiver Model Card".  

## Create a vetiver REST API 🏺

```{r}
library(plumber)

pr() |>
  vetiver_api(v) |>
  pr_run()
```

## Deploy to Posit Cloud 🚀

Posit Cloud is free! Steps to follow:

- Create account (had one already)
- Add credentials. Go to Posit cloud, click on name at the top-right, go 
  to _Account_, then _Tokens_. Create and add to the IDE (connect button, 
  then _Manage accounts_).
- `vetiver_deploy_rsconnect()` doesn't work out-of-the-box because it can't 
  use a local board, but if we copy the board to the bundle. Below is the 
  process breaking down `vetiver_deploy_rsconnect()`'s internals.

```{r}
# vetiver_deploy_rsconnect(
#   board, "chicago-inspections-rstats",
#   server = "posit.cloud"
#   )
tmp <- fs::dir_create(tempdir(), "vetiver")
vetiver_write_plumber(
  board, "chicago-inspections-rstats", 
  file = fs::path(tmp, "plumber.R")
  )
fs::dir_copy("pin-warehouse", fs::path(tmp, "pin-warehouse"))
rsconnect::deployAPI(tmp, appTitle = "chicago-inspections-rstats")
```

## Call your new API endpoints ☎️

Return predictions from your model API. Since I am using Posit Cloud, 
[this will only work if I call the API from within my projects on Posit Cloud](https://community.rstudio.com/t/public-plumber-api/172557/2).

```{r}
url <- "https://a28cdfe6fae745d1a4c54e367fc7c6bd.app.posit.cloud/predict"
endpoint <- vetiver_endpoint(url)
predict(endpoint, slice_sample(inspect_test, n = 10))
```

Optional: try `/metadata` or `/ping` here:

```{r}
url <- ___
r <- httr::GET(url)
r <- httr::content(r, as = "text", encoding = "UTF-8")
jsonlite::fromJSON(r)
```

Return predictions from **your neighbor's** model API:

```{r}
url <- ___
endpoint <- ___(url)
predict(___, slice_sample(inspect_test, n = 10))
```


## Model input prototype 🔀

For our R model:

```{r}
url <- "https://colorado.posit.co/rsc/chicago-inspections-rstats/prototype/"
r <- ___
prototype <- httr::content(r, as = "text", encoding = "UTF-8")
jsonlite::fromJSON(___)
```

For our Python model:

```{r}
url <- "https://colorado.posit.co/rsc/chicago-inspections-python/prototype/"
r <- ___
prototype <- httr::content(r, as = "text", encoding = "UTF-8")
jsonlite::fromJSON(___)
```

Make a custom input data prototype after checking out this documentation:
<https://rstudio.github.io/vetiver-r/reference/vetiver_model.html#details>

```{r}
v <- vetiver_model(___, ___, save_prototype = ___)

pr() |>
  vetiver_api(v) |>
  pr_run()
```

